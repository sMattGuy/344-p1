From: MattGuy2 <matthewfrankflammia@gmail.com>
Date: Thu, 2 Dec 2021 16:21:37 +0000 (-0500)
Subject: Updated kiosk to work how the specification intended
X-Git-Url: https://matthewflammia.xyz/gitweb/?p=344%2Fproject1;a=commitdiff_plain;h=af8e50ee81843e02995bc48fe1d4a4f8628d04bf;ds=sidebyside

Updated kiosk to work how the specification intended
---

diff --git a/bin/ID_Check.class b/bin/ID_Check.class
index a64233b..ca8fd94 100644
Binary files a/bin/ID_Check.class and b/bin/ID_Check.class differ
diff --git a/bin/ID_Checker.class b/bin/ID_Checker.class
index 938833b..712a186 100644
Binary files a/bin/ID_Checker.class and b/bin/ID_Checker.class differ
diff --git a/bin/Kiosk$KioskHelper.class b/bin/Kiosk$KioskHelper.class
deleted file mode 100644
index 705bd52..0000000
Binary files a/bin/Kiosk$KioskHelper.class and /dev/null differ
diff --git a/bin/Kiosk.class b/bin/Kiosk.class
index b29ff57..ad35a65 100644
Binary files a/bin/Kiosk.class and b/bin/Kiosk.class differ
diff --git a/bin/KioskHelper.class b/bin/KioskHelper.class
new file mode 100644
index 0000000..b108467
Binary files /dev/null and b/bin/KioskHelper.class differ
diff --git a/bin/Stalker.class b/bin/Stalker.class
deleted file mode 100644
index b99977d..0000000
Binary files a/bin/Stalker.class and /dev/null differ
diff --git a/bin/Voter.class b/bin/Voter.class
index 73fddd7..b0fe2bf 100644
Binary files a/bin/Voter.class and b/bin/Voter.class differ
diff --git a/bin/VoterDriver.class b/bin/VoterDriver.class
index 8469fd1..e18d213 100644
Binary files a/bin/VoterDriver.class and b/bin/VoterDriver.class differ
diff --git a/src/Kiosk.java b/src/Kiosk.java
index 69d4d7e..8a2aa7b 100644
--- a/src/Kiosk.java
+++ b/src/Kiosk.java
@@ -22,62 +22,16 @@ class Kiosk{
 	private Object helperConvey = new Object();
 	private boolean busy = false;
 	private boolean first = true;
-	private KioskHelper helper;
 	
-	//thread that is only for that kiosk
-	/*
-		since each kiosk only has one helper, it is better to just let it exist within its monitor
-		this makes it much easier to manage, since its restricted to only its monitor
-	*/
-	private class KioskHelper implements Runnable{
-		private String name;
-		private Kiosk kiosk;
-		
-		public KioskHelper(String name, Kiosk kiosk){
-			this.name = name;
-			this.kiosk = kiosk;
-		}
-		
-		public void run(){
-			try{
-				while(kiosk.waitingVoters.size() != 0){
-					this.msg("Ready to help next voter to kiosk");
-					//loop helpers job until voters are all gone
-					kiosk.startHelping(this.name);
-					this.msg("Waiting for voter to finish at kiosk");
-					this.wasteTime(1000,2000);
-				}
-				this.kiosk.first = true;
-				this.msg("Done helping voters at kiosk, leaving (exiting until more voters arrive)");
-			}
-			catch(InterruptedException e){
-				System.out.println(e);
-			}
-		}
-		public static long time = System.currentTimeMillis();
-	
-		public void msg(String m) {
-			System.out.println("["+(System.currentTimeMillis()-time)+"] "+this.name+": "+m);
-		}
-		
-		private void wasteTime(int min,int max) throws InterruptedException{
-			Random rand = new Random(System.currentTimeMillis());
-			TimeUnit.MILLISECONDS.sleep(rand.nextInt(max-min)+min);
-		}
-	}
 	//constructor
 	public Kiosk(int num, Tracker tracker){
+		this.kioskNum = num;
 		this.tracker = tracker;
-		helper = new KioskHelper("KioskHelper_"+num,this);
 	}
 	
 	//essentially same code as in ID_Check, except that there will only ever be one helper per kiosk
 	//service methods for voter
 	public void enterLine(String name){
-		if(first){
-			first = false;
-			new Thread(helper).start();
-		}
 		//object that thread will wait on
 		Object convey = new Object();
 		synchronized(convey){
@@ -104,7 +58,7 @@ class Kiosk{
 		alertBusyHelper();
 	}
 	//called by helpers to kick things off
-	public void startHelping(String name){
+	public boolean startHelping(String name){
 		if(!waitingVoters.isEmpty()){
 			//assist voter
 			alertVoters();
@@ -121,6 +75,25 @@ class Kiosk{
 					}
 				}
 			}
+			return false;
+		}
+		else{
+			//line empty, wait
+			if(this.tracker.kioskVotersRemaining <= 6 && this.waitingVoters.size() == 0){
+				return true;
+			}
+			synchronized(helperConvey){
+				while(true){
+					try{
+						helperConvey.wait();
+						break;
+					}
+					catch(InterruptedException e){
+						continue;
+					}
+				}
+			}
+			return false;
 		}
 	}
 	//methods to release threads from their queues
diff --git a/src/KioskHelper.java b/src/KioskHelper.java
new file mode 100644
index 0000000..70b2508
--- /dev/null
+++ b/src/KioskHelper.java
@@ -0,0 +1,42 @@
+import java.util.Random;
+import java.util.concurrent.TimeUnit;
+
+public class KioskHelper implements Runnable{
+	private String name;
+	private Kiosk kiosk;
+	
+	public Tracker tracker;
+	
+	public KioskHelper(String name, Kiosk kiosk, Tracker tracker){
+		this.name = name;
+		this.kiosk = kiosk;
+		this.tracker = tracker;
+		new Thread(this).start();
+	}
+	
+	public void run(){
+		try{
+			while(tracker.kioskVotersRemaining != 0){
+				this.msg("Ready to help next voter to kiosk");
+				//loop helpers job until voters are all gone
+				if(kiosk.startHelping(this.name)){break;};
+				this.msg("Waiting for voter to finish at kiosk");
+				this.wasteTime(1000,2000);
+			}
+			this.msg("Done helping voters at kiosk, leaving");
+		}
+		catch(InterruptedException e){
+			System.out.println(e);
+		}
+	}
+	public static long time = System.currentTimeMillis();
+
+	public void msg(String m) {
+		System.out.println("["+(System.currentTimeMillis()-time)+"] "+this.name+": "+m);
+	}
+	
+	private void wasteTime(int min,int max) throws InterruptedException{
+		Random rand = new Random(System.currentTimeMillis());
+		TimeUnit.MILLISECONDS.sleep(rand.nextInt(max-min)+min);
+	}
+}
\ No newline at end of file
diff --git a/src/VoterDriver.java b/src/VoterDriver.java
index cd733c0..1881708 100644
--- a/src/VoterDriver.java
+++ b/src/VoterDriver.java
@@ -17,6 +17,7 @@ public class VoterDriver{
 		Vector<Kiosk> kiosks = new Vector<>();
 		for(int i=0;i<numKiosks;i++){
 			kiosks.addElement(new Kiosk(i,tracker));
+			new KioskHelper("KioskHelper_"+i,kiosks.elementAt(i),tracker);
 		}
 		//create ID helpers
 		for(int i=0;i<numIDHelpers;i++){